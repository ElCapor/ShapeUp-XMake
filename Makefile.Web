.PHONY: all clean run

# Define required environment variables
#------------------------------------------------------------------------------------------------
# Define target platform: PLATFORM_DESKTOP, PLATFORM_RPI, PLATFORM_DRM, PLATFORM_ANDROID, PLATFORM_WEB
PLATFORM              ?= PLATFORM_WEB

# Define project variables
PROJECT_NAME          ?= ShapeUp_$(shell date +%Y%m%d%H%M%S)

RAYLIB_PATH           ?= ../3rdParty/raylib

# Locations of raylib.h and libraylib.a/libraylib.so
# NOTE: Those variables are only used for PLATFORM_OS: LINUX, BSD
RAYLIB_INCLUDE_PATH   ?= lib/raylib-4.5.0_webassembly/include/
RAYLIB_LIB_PATH       ?= lib/raylib-4.5.0_webassembly/lib/

# Library type compilation: STATIC (.a) or SHARED (.so/.dll)
RAYLIB_LIBTYPE        ?= STATIC

# Build mode for project: DEBUG or RELEASE
BUILD_MODE            ?= RELEASE

# Use Wayland display server protocol on Linux desktop (by default it uses X11 windowing system)
# NOTE: This variable is only used for PLATFORM_OS: LINUX
USE_WAYLAND_DISPLAY   ?= FALSE

# PLATFORM_WEB: Default properties
BUILD_WEB_ASYNCIFY    ?= TRUE
BUILD_WEB_SHELL       ?= src/minshell.html
BUILD_WEB_HEAP_SIZE   ?= 134217728
BUILD_WEB_RESOURCES   ?= FALSE
BUILD_WEB_RESOURCES_PATH  ?= resources

OS ?= "NOT_WINDOWS_NT"

# Use cross-compiler for PLATFORM_RPI
ifeq ($(PLATFORM),PLATFORM_RPI)
	USE_RPI_CROSS_COMPILER ?= FALSE
	ifeq ($(USE_RPI_CROSS_COMPILER),TRUE)
		RPI_TOOLCHAIN ?= C:/SysGCC/Raspberry
		RPI_TOOLCHAIN_SYSROOT ?= $(RPI_TOOLCHAIN)/arm-linux-gnueabihf/sysroot
	endif
endif

# Determine PLATFORM_OS in case PLATFORM_DESKTOP selected
ifeq ($(PLATFORM),PLATFORM_DESKTOP)
	# No uname.exe on MinGW!, but OS=Windows_NT on Windows!
	# ifeq ($(UNAME),Msys) -> Windows
	ifeq ($(OS),Windows_NT)
		PLATFORM_OS = WINDOWS
		ifndef PLATFORM_SHELL
			PLATFORM_SHELL = cmd
		endif
	else
		UNAMEOS = $(shell uname)
		ifeq ($(UNAMEOS),Linux)
			PLATFORM_OS = LINUX
		endif
		ifeq ($(UNAMEOS),FreeBSD)
			PLATFORM_OS = BSD
		endif
		ifeq ($(UNAMEOS),OpenBSD)
			PLATFORM_OS = BSD
		endif
		ifeq ($(UNAMEOS),NetBSD)
			PLATFORM_OS = BSD
		endif
		ifeq ($(UNAMEOS),DragonFly)
			PLATFORM_OS = BSD
		endif
		ifeq ($(UNAMEOS),Darwin)
			PLATFORM_OS = OSX
		endif
		ifndef PLATFORM_SHELL
			PLATFORM_SHELL = sh
		endif
	endif
endif
ifeq ($(PLATFORM),PLATFORM_RPI)
	UNAMEOS = $(shell uname)
	ifeq ($(UNAMEOS),Linux)
		PLATFORM_OS = LINUX
	endif
	ifndef PLATFORM_SHELL
		PLATFORM_SHELL = sh
	endif
endif
ifeq ($(PLATFORM),PLATFORM_DRM)
	UNAMEOS = $(shell uname)
	ifeq ($(UNAMEOS),Linux)
		PLATFORM_OS = LINUX
	endif
	ifndef PLATFORM_SHELL
		PLATFORM_SHELL = sh
	endif
endif
ifeq ($(PLATFORM),PLATFORM_WEB)
	ifeq ($(OS),Windows_NT)
		PLATFORM_OS = WINDOWS
		ifndef PLATFORM_SHELL
			PLATFORM_SHELL = cmd
		endif
	else
		UNAMEOS = $(shell uname)
		ifeq ($(UNAMEOS),Linux)
			PLATFORM_OS = LINUX
		endif
		ifndef PLATFORM_SHELL
			PLATFORM_SHELL = sh
		endif
	endif
endif

# Default path for raylib on Raspberry Pi
ifeq ($(PLATFORM),PLATFORM_RPI)
	RAYLIB_PATH        ?= /home/pi/raylib
endif
ifeq ($(PLATFORM),PLATFORM_DRM)
	RAYLIB_PATH        ?= /home/pi/raylib
endif

# Define raylib release directory for compiled library
RAYLIB_RELEASE_PATH 	?= lib/raylib-4.5.0_webassembly/lib

ifeq ($(OS),Windows_NT)
	ifeq ($(PLATFORM),PLATFORM_WEB)
		# Emscripten required variables
		EMSDK_PATH         ?= C:/emsdk
		EMSCRIPTEN_PATH    ?= $(EMSDK_PATH)/upstream/emscripten
		CLANG_PATH          = $(EMSDK_PATH)/upstream/bin
		PYTHON_PATH         = $(EMSDK_PATH)/python/3.9.2-nuget_64bit
		NODE_PATH           = $(EMSDK_PATH)/node/14.15.5_64bit/bin
		export PATH         = $(EMSDK_PATH);$(EMSCRIPTEN_PATH);$(CLANG_PATH);$(NODE_PATH);$(PYTHON_PATH):$$(PATH)
	endif
endif

# Define default C compiler: CC
#------------------------------------------------------------------------------------------------
CC = gcc

ifeq ($(PLATFORM),PLATFORM_DESKTOP)
	ifeq ($(PLATFORM_OS),OSX)
		# OSX default compiler
		CC = clang
	endif
	ifeq ($(PLATFORM_OS),BSD)
		# FreeBSD, OpenBSD, NetBSD, DragonFly default compiler
		CC = clang
	endif
endif
ifeq ($(PLATFORM),PLATFORM_RPI)
	ifeq ($(USE_RPI_CROSS_COMPILER),TRUE)
		# Define RPI cross-compiler
		#CC = armv6j-hardfloat-linux-gnueabi-gcc
		CC = $(RPI_TOOLCHAIN)/bin/arm-linux-gnueabihf-gcc
	endif
endif
ifeq ($(PLATFORM),PLATFORM_WEB)
	# HTML5 emscripten compiler
	# WARNING: To compile to HTML5, code must be redesigned
	# to use emscripten.h and emscripten_set_main_loop()
	CC = emcc
endif


# Define compiler flags: CFLAGS
#------------------------------------------------------------------------------------------------
#  -s                   strip unnecessary data from build
#  -Wall                turns on most, but not all, compiler warnings
#  -std=gnu99           defines C language mode (GNU C from 1999 revision)
#  -Wno-missing-braces  ignore invalid warning (GCC bug 53119)
#  -Wno-unused-value    ignore unused return values of some functions (i.e. fread())
#  -D_DEFAULT_SOURCE    use with -std=c99 on Linux and PLATFORM_WEB, required for timespec
CFLAGS = -std=gnu99 -Wall -Wno-missing-braces -Wunused-result -D_DEFAULT_SOURCE -Wno-pointer-sign

ifeq ($(BUILD_MODE),DEBUG)
	CFLAGS += -g -D_DEBUG
else
	ifeq ($(PLATFORM),PLATFORM_WEB)
		ifeq ($(BUILD_WEB_ASYNCIFY),TRUE)
			CFLAGS += -O3
		else
			CFLAGS += -Os
		endif
	else
		CFLAGS += -s -O2
	endif
endif

# Additional flags for compiler (if desired)
#CFLAGS += -Wextra -Wmissing-prototypes -Wstrict-prototypes
ifeq ($(PLATFORM),PLATFORM_DESKTOP)
	ifeq ($(PLATFORM_OS),LINUX)
		ifeq ($(RAYLIB_LIBTYPE),STATIC)
			CFLAGS += -D_DEFAULT_SOURCE
		endif
		ifeq ($(RAYLIB_LIBTYPE),SHARED)
			# Explicitly enable runtime link to libraylib.so
			CFLAGS += -Wl,-rpath,$(RAYLIB_RELEASE_PATH)
		endif
	endif
endif
ifeq ($(PLATFORM),PLATFORM_RPI)
	CFLAGS += -std=gnu99
endif
ifeq ($(PLATFORM),PLATFORM_DRM)
	CFLAGS += -std=gnu99 -DEGL_NO_X11
endif

# Define include paths for required headers: INCLUDE_PATHS
# NOTE: Some external/extras libraries could be required (stb, physac, easings...)
#------------------------------------------------------------------------------------------------
INCLUDE_PATHS = -I. -I$(RAYLIB_PATH)/src -I$(RAYLIB_PATH)/src/external -I$(RAYLIB_PATH)/src/extras -Ilib/raylib-4.5.0_macos/include -I build

# Define additional directories containing required header files
ifeq ($(PLATFORM),PLATFORM_DESKTOP)
	ifeq ($(PLATFORM_OS),BSD)
		INCLUDE_PATHS += -I$(RAYLIB_INCLUDE_PATH)
	endif
	ifeq ($(PLATFORM_OS),LINUX)
		INCLUDE_PATHS += -I$(RAYLIB_INCLUDE_PATH)
	endif
endif
ifeq ($(PLATFORM),PLATFORM_RPI)
	INCLUDE_PATHS += -I$(RPI_TOOLCHAIN_SYSROOT)/opt/vc/include
	INCLUDE_PATHS += -I$(RPI_TOOLCHAIN_SYSROOT)/opt/vc/include/interface/vmcs_host/linux
	INCLUDE_PATHS += -I$(RPI_TOOLCHAIN_SYSROOT)/opt/vc/include/interface/vcos/pthreads
endif
ifeq ($(PLATFORM),PLATFORM_DRM)
	INCLUDE_PATHS += -I/usr/include/libdrm
endif
ifeq ($(PLATFORM),PLATFORM_WEB)
	INCLUDE_PATHS += -I$(EMSCRIPTEN_PATH)/cache/sysroot/include
endif

# Define library paths containing required libs: LDFLAGS
#------------------------------------------------------------------------------------------------
LDFLAGS = -L. -L$(RAYLIB_RELEASE_PATH) -L$(RAYLIB_PATH)/src -Ilib/raylib-4.5.0_macos/lib

ifeq ($(PLATFORM),PLATFORM_DESKTOP)
	ifeq ($(PLATFORM_OS),WINDOWS)
		# NOTE: The resource .rc file contains windows executable icon and properties
		LDFLAGS += $(RAYLIB_PATH)/src/raylib.rc.data
		# -Wl,--subsystem,windows hides the console window
		ifeq ($(BUILD_MODE), RELEASE)
			LDFLAGS += -Wl,--subsystem,windows
		endif
	endif
	ifeq ($(PLATFORM_OS),LINUX)
		LDFLAGS += -L$(RAYLIB_LIB_PATH)
	endif
	ifeq ($(PLATFORM_OS),BSD)
		LDFLAGS += -Lsrc -L$(RAYLIB_LIB_PATH)
	endif
endif
ifeq ($(PLATFORM),PLATFORM_WEB)
	# -Os                        # size optimization
	# -O2                        # optimization level 2, if used, also set --memory-init-file 0
	# -s USE_GLFW=3              # Use glfw3 library (context/input management)
	# -s ALLOW_MEMORY_GROWTH=1   # to allow memory resizing -> WARNING: Audio buffers could FAIL!
	# -s TOTAL_MEMORY=16777216   # to specify heap memory size (default = 16MB) (67108864 = 64MB)
	# -s USE_PTHREADS=1          # multithreading support
	# -s WASM=0                  # disable Web Assembly, emitted by default
	# -s ASYNCIFY                # lets synchronous C/C++ code interact with asynchronous JS
	# -s FORCE_FILESYSTEM=1      # force filesystem to load/save files data
	# -s ASSERTIONS=1            # enable runtime checks for common memory allocation errors (-O1 and above turn it off)
	# --profiling                # include information for code profiling
	# --memory-init-file 0       # to avoid an external memory initialization code file (.mem)
	# --preload-file resources   # specify a resources folder for data compilation
	# --source-map-base          # allow debugging in browser with source map
	LDFLAGS += -s USE_GLFW=3 -s TOTAL_MEMORY=$(BUILD_WEB_HEAP_SIZE) -s FORCE_FILESYSTEM=1 -sMIN_WEBGL_VERSION=2 -sMAX_WEBGL_VERSION=2
	
	# Build using asyncify
	ifeq ($(BUILD_WEB_ASYNCIFY),TRUE)
		LDFLAGS += -s ASYNCIFY
	endif
	
	# Add resources building if required
	ifeq ($(BUILD_WEB_RESOURCES),TRUE)
		LDFLAGS += --preload-file $(BUILD_WEB_RESOURCES_PATH)
	endif
	
	# Add debug mode flags if required
	ifeq ($(BUILD_MODE),DEBUG)
		LDFLAGS += -s ASSERTIONS=1 --profiling
	endif

	# Define a custom shell .html and output extension
	LDFLAGS += --shell-file $(BUILD_WEB_SHELL)
	EXT = .html
endif
ifeq ($(PLATFORM),PLATFORM_RPI)
	LDFLAGS += -L$(RPI_TOOLCHAIN_SYSROOT)/opt/vc/lib
endif

# Define libraries required on linking: LDLIBS
# NOTE: To link libraries (lib<name>.so or lib<name>.a), use -l<name>
#------------------------------------------------------------------------------------------------
ifeq ($(PLATFORM),PLATFORM_DESKTOP)
	ifeq ($(PLATFORM_OS),WINDOWS)
		# Libraries for Windows desktop compilation
		# NOTE: WinMM library required to set high-res timer resolution
		LDLIBS = -lraylib -lopengl32 -lgdi32 -lwinmm
		# Required for physac examples
		LDLIBS += -static -lpthread
	endif
	ifeq ($(PLATFORM_OS),LINUX)
		# Libraries for Debian GNU/Linux desktop compiling
		# NOTE: Required packages: libegl1-mesa-dev
		LDLIBS = -lraylib -lGL -lm -lpthread -ldl -lrt

		# On X11 requires also below libraries
		LDLIBS += -lX11
		# NOTE: It seems additional libraries are not required any more, latest GLFW just dlopen them
		#LDLIBS += -lXrandr -lXinerama -lXi -lXxf86vm -lXcursor

		# On Wayland windowing system, additional libraries requires
		ifeq ($(USE_WAYLAND_DISPLAY),TRUE)
			LDLIBS += -lwayland-client -lwayland-cursor -lwayland-egl -lxkbcommon
		endif
		# Explicit link to libc
		ifeq ($(RAYLIB_LIBTYPE),SHARED)
			LDLIBS += -lc
		endif
	endif
	ifeq ($(PLATFORM_OS),OSX)
		# Libraries for OSX 10.9 desktop compiling
		# NOTE: Required packages: libopenal-dev libegl1-mesa-dev
		LDLIBS = -lraylib -framework OpenGL -framework Cocoa -framework IOKit -framework CoreAudio -framework CoreVideo
	endif
	ifeq ($(PLATFORM_OS),BSD)
		# Libraries for FreeBSD, OpenBSD, NetBSD, DragonFly desktop compiling
		# NOTE: Required packages: mesa-libs
		LDLIBS = -lraylib -lGL -lpthread -lm

		# On XWindow requires also below libraries
		LDLIBS += -lX11 -lXrandr -lXinerama -lXi -lXxf86vm -lXcursor
	endif
endif
ifeq ($(PLATFORM),PLATFORM_RPI)
	# Libraries for Raspberry Pi compiling
	# NOTE: Required packages: libasound2-dev (ALSA)
	LDLIBS = -lraylib -lbrcmGLESv2 -lbrcmEGL -lpthread -lrt -lm -lbcm_host -ldl
	ifeq ($(USE_RPI_CROSS_COMPILER),TRUE)
		LDLIBS += -lvchiq_arm -lvcos
	endif
endif
ifeq ($(PLATFORM),PLATFORM_DRM)
	# Libraries for DRM compiling
	# NOTE: Required packages: libasound2-dev (ALSA)
	LDLIBS = -lraylib -lGLESv2 -lEGL -lpthread -lrt -lm -lgbm -ldrm -ldl
endif
ifeq ($(PLATFORM),PLATFORM_WEB)
	# Libraries for web (HTML5) compiling
	LDLIBS = $(RAYLIB_RELEASE_PATH)/libraylib.a
endif

# Define source code object files required
#------------------------------------------------------------------------------------------------
PROJECT_SOURCE_FILES ?= \
	src/main.c 
# 	src/pinchSwizzle.m 

# Define all object files from source files
OBJS = $(patsubst %.c, %.o, $(PROJECT_SOURCE_FILES))


# Define processes to execute
#------------------------------------------------------------------------------------------------

# Default target entry
all: $(PROJECT_NAME)

build/shaders.h: src/*.fs Makefile build
	(cat src/shader_base.fs; printf '\0') > build/shader_base.fs
	(cat src/shader_prefix.fs; printf '\0') > build/shader_prefix.fs
	(cat src/slicer_body.fs; printf '\0') > build/slicer_body.fs
	(cat src/selection.fs; printf '\0') > build/selection.fs
	cd build && xxd -i shader_base.fs shaders.h
	cd build && xxd -i shader_prefix.fs >> shaders.h
	cd build && xxd -i slicer_body.fs >> shaders.h
	cd build && xxd -i selection.fs >> shaders.h

# Project target defined by PROJECT_NAME
$(PROJECT_NAME): $(OBJS) build/shaders.h
	mkdir -p build
# 	rm build/*.js build/*.data build/*.wasm build/*.html
	$(CC) -o build/$(PROJECT_NAME)$(EXT) $(OBJS) $(CFLAGS) $(INCLUDE_PATHS) $(LDFLAGS) $(LDLIBS) -D$(PLATFORM)
ifeq ($(PLATFORM),PLATFORM_WEB)
	mv build/$(PROJECT_NAME).html build/index.html
endif

# Compile source files
# NOTE: This pattern will compile every module defined on $(OBJS)
%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS) $(INCLUDE_PATHS) -D$(PLATFORM)


